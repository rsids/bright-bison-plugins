<?xml version="1.0" encoding="utf-8"?>
<mx:Module 	
	horizontalAlign="left"
	styleName="pluginStyle"
	width="100%"
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	verticalAlign="top"
	implements="nl.bs10.brightlib.interfaces.IPlugin"
	layout="horizontal" xmlns:components="nl.bs10.brightlib.components.*">
	
	<mx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import mx.controls.Alert;
			
			import nl.bs10.brightlib.components.GrayImageButton;
			import nl.bs10.brightlib.controllers.IconController;
			import nl.bs10.brightlib.events.BrightEvent;
			import nl.bs10.brightlib.events.FileExplorerEvent;
			import nl.bs10.brightlib.interfaces.IPlugin;
			import nl.bs10.brightlib.objects.PluginProperties;
			import nl.bs10.list.ListItem;
			
			[Bindable] private var _deftypes:Array;
			
			private var _definitionsLoaded:Boolean;
			
			private var _label:String;
			private var _direction:String = "vertical";
			private var _displaylabel:String;
			private var _value:Array;
			
			private var _data:Object;

			private var _valueChanged:Boolean;
			private var _dataChanged:Boolean;
			
			private var _maximum:Number;
			private var _minimum:Number;
			
			private var _newItemsOnTop:Boolean = false;
			
			public function getProperties():PluginProperties {
				var pp:PluginProperties = new PluginProperties();
				pp.pluginname = "List";
				pp.version = "3.1.1b";
				pp.type = "list";
				pp.modificationdate = new Date(2014,00,20);
				pp.contenttype = "array";
				pp.properties = [{name: "minimum", type:"number"}, {name: "maximum", type:"number"}, {name: "direction", type:"string"}, {name: "definitionids", type:"array"}, {name: "startcollapsed", type:"boolean"}, {name:"newItemsOnTop", type:"boolean"}];
				return pp;
			}
			
			public function destroy():void {
				_deftypes = null;
				data = 
				value =
				displaylabel =
				label = null;
				if(listitems_vb) {
					var children:Array = listitems_vb.getChildren();
					var result:Array = new Array();
					for each (var li:ListItem in children) {
						
						li.plugin.removeEventListener(FileExplorerEvent.OPENFILEEXPLOREREVENT, _openFileExplorer);
						li.plugin.removeEventListener(BrightEvent.DATAEVENT, _dataEvent);
						li.plugin.destroy();
						listitems_vb.removeChild(li);
					}
				}
			}
		
			override public function set label(value:String):void {
				super.label = value;
				_label = value;
			}
			
			override public function get label():String {
				return _label;
			}
			
			[Bindable(event='directionChanged')]
			public function set direction(value:String):void {
				if(value !== direction) {
					_direction = value;
					dispatchEvent(new Event('directionChanged'));
				}
				
			}
			
			public function get direction():String {
				return _direction;
			}
			
			[Bindable(event='displaylabelChanged')]
			public function set displaylabel(value:String):void {
				if(value !== _displaylabel) {
					_displaylabel = value;
					dispatchEvent(new Event('displaylabelChanged'));
				}
				
			}
			
			public function get displaylabel():String {
				return _displaylabel;
			}
			
			override public function set data(val:Object):void {
				super.data = val;
				
				if(!val) 
					return;
				
				_data = val;
				
				if(_data.hasOwnProperty("minimum"))
					_minimum = _data.minimum;
				if(_data.hasOwnProperty("maximum"))
					_maximum = _data.maximum;
				if(_data.hasOwnProperty("newItemsOnTop"))
					_newItemsOnTop = _data.newItemsOnTop; 
					
				_dataChanged = true;
				invalidateProperties();
			}
			
			public function set value(value:*):void {
				if(!(value is Array))
					value = [value];
				_value = value as Array;
				_valueChanged = true;
				invalidateProperties();
			}
				
			public function get value():* {
				if(!listitems_vb)
					return null;
				
				var children:Array = listitems_vb.getChildren();
				var result:Array = new Array();
				for each (var li:ListItem in children) {
					// Ignore null values
					if(li.value !== null)
						result.push(JSON.encode({type:li.type, value:li.value}));
				}
				return result;
			}
			
			public function getModelValue(value:String):* {
				return parentApplication.getModelValue(value);
			}
			
			override public function get data():Object {
				return _data;
			}
			
			public function validate():Object {
				var children:Array = listitems_vb.getChildren()
				var result:Array = new Array();
				for each (var li:ListItem in children) {
					result.push(li.validate());
				}
				
				var validationresult:Object = {valid:true, reason:[]};
				
				for each(var valresult:Object in result) {
					if(!valresult.valid) {
						validationresult.reason.concat(valresult.reason);
						validationresult.valid = false;
					}
				}
				
				return validationresult;
			}
			
			private function _addListItem(type:Object = null, fnvalue:String = null):void {
				if(_maximum > -1 && listitems_vb.numChildren == _maximum) {
					Alert.show("This list has a maximum of " + _maximum + " items", "Cannot add item");
					return;
				}
				var tobj:Object = (type) ? type : deftype_cmb.selectedItem;
				var plugin:IPlugin = parentApplication.getModelValue('templateVO.plugins')[tobj.type].create();
				plugin.label = tobj.label;
				plugin.displaylabel = tobj.displaylabel;
				
				var dataobj:Object = {};
				// Set additional properties
				if(tobj.hasOwnProperty("data") && tobj.data != "" && tobj.data != null) {
					dataobj = JSON.decode(tobj.data);
				}
				plugin.data = dataobj;
	
				if(fnvalue)
					plugin.value = fnvalue;
				
				plugin.addEventListener(FileExplorerEvent.OPENFILEEXPLOREREVENT, _openFileExplorer, false, 0, true);
				plugin.addEventListener(BrightEvent.DATAEVENT, _dataEvent, false, 0, true);
				var li:ListItem = new ListItem();
				li.addEventListener("moveup", _moveUp);
				li.addEventListener("movedown", _moveDown);
				li.plugin = plugin;
				li.type = tobj.label;
				
				if(!_newItemsOnTop || fnvalue) {
					listitems_vb.addChild(li);
				} else {
					listitems_vb.addChildAt(li, 0);
				}
				
				if(type || fnvalue)
					return;
					
				listitems_vb.visible =
				listitems_vb.includeInLayout = true;
				collapse_btn.source = IconController.UPARROW; 
			}
			
			private function _openFileExplorer(event:FileExplorerEvent):void {
				dispatchEvent(new FileExplorerEvent(event.type, event.callback, event.multiple, event.filter, event.foldersOnly, event.bubbles, event.cancelable));
			}
			
			private function _dataEvent(event:BrightEvent):void {
				dispatchEvent(new BrightEvent(event.type, event.data, event.bubbles, event.cancelable));
			}
			
			private function _moveDown(event:Event):void {
				var index:int = listitems_vb.getChildIndex(event.currentTarget as DisplayObject);
				if(index < listitems_vb.numChildren - 1)
					listitems_vb.addChildAt(listitems_vb.removeChildAt(index), index+1);
			}
			
			private function _moveUp(event:Event):void {
				var index:int = listitems_vb.getChildIndex(event.currentTarget as DisplayObject);
				if(index > 0)
					listitems_vb.addChildAt(listitems_vb.removeChildAt(index), index-1);
			}
			
			private function _collapse(event:MouseEvent):void {
				listitems_vb.visible =
				listitems_vb.includeInLayout = !listitems_vb.visible;
				(event.currentTarget).source = (listitems_vb.visible) ? IconController.DOWNARROW : IconController.LEFTARROW;
			}
			
			override protected function commitProperties():void {
				super.commitProperties();
				if(_dataChanged) {
					_dataChanged = false;
					if(_data.hasOwnProperty("direction")) {
						direction = (_data.direction == "horizontal") ? "horizontal" : "vertical";
					}
					
					if(_data.hasOwnProperty("height")) {
						if(String(_data.height).indexOf("%") != -1) {
							lst_vb.percentHeight = Number(_data.height.split("%")[0]);
						} else {
							lst_vb.height = _data.height;
						}
						lst_vb.invalidateDisplayList();
					}
					if(data.definitionids == null) {
						Alert.show("There are no listitems specified for list '" + label + "'", "Cannot create list");
					} else {
						_deftypes = parentApplication.getDefinitionsById(data.definitionids);
						_definitionsLoaded = true;
					}
				}
				
				if(_valueChanged && _definitionsLoaded) {
					_valueChanged = false;
					for each(var val:Object in _value) {
						
						if(val is String)
							val = JSON.decode(val.toString());
							
						for each(var type:Object in _deftypes) {
							if(val && type.label == val.type) {
								// Check for null, shouldn't be possible anymore,
								// But pre 2.8.x versions didn't check for null values on save
								_addListItem(type, (val.value !== null) ? val.value.toString() : null);
								break;
							}
						}
					}	
				}
			}
		
		]]>
	</mx:Script>
	
		
	<mx:VBox
		width="100%"
		styleName="listBox"
		id="lst_vb">
		
		<mx:HBox
			paddingBottom="5"
			paddingLeft="5"
			paddingRight="5"
			paddingTop="5"
			styleName="headerBar"
			verticalAlign="middle"
			width="100%">
			
			<mx:Label
				width="150"
				text="{displaylabel + ':'}"
				id="label_lbl" />
				
			<mx:ComboBox
				id="deftype_cmb"
				labelField="displaylabel"
				width="150"
				dataProvider="{_deftypes}" />
			
			<components:GrayImageButton
				source="{IconController.getGray('add')}"
				click="_addListItem()" />
				
			<mx:Spacer width="100%" />
			
			<components:GrayImageButton
				source="{IconController.DOWNARROW}"
				toolTip="Collapse"
				id="collapse_btn"
				click="_collapse(event)" />
			
		</mx:HBox>
		
		<mx:Box
			childIndexChange="invalidateDisplayList()"
			childRemove="invalidateDisplayList()"
			styleName="innerVBox"
			width="100%"
			height="100%"
			paddingBottom="20"
			paddingLeft="5"
			paddingRight="5"
			paddingTop="5"
			direction="{direction}"
			backgroundAlpha=".1"
			backgroundColor="#ffffff"
			id="listitems_vb">
			
		</mx:Box>
		
	</mx:VBox>
	
	
</mx:Module>
